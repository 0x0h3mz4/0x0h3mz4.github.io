I"<h1 id="phoenix-exploit-education">Phoenix exploit education</h1>

<h1 id="stack-0"><strong>Stack 0:</strong></h1>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * phoenix/stack-zero, by https://exploit.education
 *
 * The aim is to change the contents of the changeme variable.
 *
 * Scientists have recently discovered a previously unknown species of
 * kangaroos, approximately in the middle of Western Australia. These
 * kangaroos are remarkable, as their insanely powerful hind legs give them
 * the ability to jump higher than a one story house (which is approximately
 * 15 feet, or 4.5 metres), simply because houses can't can't jump.
 */</span>

<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span>
<span class="cp">#define BANNER \
  "Welcome to " LEVELNAME ", brought to you by https://exploit.education"
</span>
<span class="kt">char</span> <span class="o">*</span><span class="nf">gets</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">struct</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
    <span class="k">volatile</span> <span class="kt">int</span> <span class="n">changeme</span><span class="p">;</span>
  <span class="p">}</span> <span class="n">locals</span><span class="p">;</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">BANNER</span><span class="p">);</span>

  <span class="n">locals</span><span class="p">.</span><span class="n">changeme</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">gets</span><span class="p">(</span><span class="n">locals</span><span class="p">.</span><span class="n">buffer</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">locals</span><span class="p">.</span><span class="n">changeme</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">"Well done, the 'changeme' variable has been changed!"</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span>
        <span class="s">"Uh oh, 'changeme' has not yet been changed. Would you like to try "</span>
        <span class="s">"again?"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So basically we have a struct composed of two variables:</p>

<ul>
  <li>a string named <code class="language-plaintext highlighter-rouge">buffer</code> that has 64 in its length</li>
  <li>an integer named <code class="language-plaintext highlighter-rouge">changeme</code></li>
</ul>

<p>The code gives us an input to enter which will be assign to the string <code class="language-plaintext highlighter-rouge">buffer</code> , with that being said we are in control of the variable <code class="language-plaintext highlighter-rouge">buffer</code> as a user.</p>

<p>then there is a condition that checks if <code class="language-plaintext highlighter-rouge">changeme</code> is changed to something other than 0.</p>

<p>Our task in this challenge is to simply change the variable <code class="language-plaintext highlighter-rouge">changeme</code></p>

<p><img src="/img/posts/Untitled.png" alt="My Image" /></p>

<p>Above I displayed the stack, and how it stores local variables.</p>

<p>which means that the string <code class="language-plaintext highlighter-rouge">buffer</code> is above <code class="language-plaintext highlighter-rouge">changeme</code></p>

<p><img src="/img/posts/Untitled%201.png" alt="Untitled" /></p>

<p>Therefore if we could manage to write on the string <code class="language-plaintext highlighter-rouge">buffer</code> some string longer than 64 characters we can overwrite it and thus we will be writing on <code class="language-plaintext highlighter-rouge">changeme</code> because itâ€™s bellow it ðŸ˜Ž</p>

<p>ok letâ€™s try it with a string of 64 characters:</p>

<p><img src="/img/posts/Untitled%202.png" alt="Untitled" /></p>

<p>And letâ€™s now add one more:</p>

<p><img src="/img/posts/Untitled%203.png" alt="Untitled" /></p>

<p>Congrats !!! we changed the <code class="language-plaintext highlighter-rouge">changeme</code> variable.</p>

<p><img src="/img/posts/Untitled%204.png" alt="Untitled" /></p>
:ET